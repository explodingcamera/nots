on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to build and add binaries to (e.g. nots-cli-v0.1.0). Has to be a tag from a release."
        required: true
        type: string

name: Build and release binaries/containers

env:
  RELEASE_TAG_REF: ${{ github.event.inputs.tag || github.ref_name }}

jobs:
  build-notsd:
    if: "${{contains((github.event.inputs.tag || github.ref_name), 'notsd-v')}}"
    name: Release ${{ github.event.inputs.tag || github.ref_name }} Docker image
    permissions:
      packages: write
      contents: write
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: refs/tags/${{ env.RELEASE_TAG_REF }}
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      - name: Install aarch64 gcc
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      - name: Install latest stable Rust and add targets
        run: |
          rustup toolchain install stable
          rustup default stable
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-unknown-linux-gnu
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build binaries
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu --locked --bin notsd
          cargo build --release --target aarch64-unknown-linux-gnu --locked --bin notsd

          tar -czf target/x86_64-unknown-linux-gnu/release/notsd-x86_64-unknown-linux-gnu.tar.gz target/x86_64-unknown-linux-gnu/release/notsd
          tar -czf target/aarch64-unknown-linux-gnu/release/notsd-aarch64-unknown-linux-gnu.tar.gz target/aarch64-unknown-linux-gnu/release/notsd
      - name: Upload binary to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG_REF }}
          files: |
            target/x86_64-unknown-linux-gnu/release/notsd-x86_64-unknown-linux-gnu.tar.gz
            target/aarch64-unknown-linux-gnu/release/notsd-aarch64-unknown-linux-gnu.tar.gz
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Outputs
        id: out
        run: |
          mkdir -p /tmp/outputs
          mv target/aarch64-unknown-linux-gnu/release/notsd /tmp/outputs/notsd-arm64
          mv target/x86_64-unknown-linux-gnu/release/notsd /tmp/outputs/notsd-amd64
          version=$(echo ${{ env.RELEASE_TAG_REF }} | sed 's/notsd-v//')
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ghcr.io/explodingcamera/notsd:${{ steps.out.outputs.version }}
          platforms: linux/amd64,linux/arm64
          file: crates/notsd/Dockerfile
          context: /tmp/outputs
          build-args: |
            NOTS_VERSION=v${{ steps.out.outputs.version }}

  build-cli:
    permissions:
      contents: write
    name: Release ${{ github.event.inputs.tag || github.ref_name }} ${{ matrix.platform.release_for }}
    if: "${{contains((github.event.inputs.tag || github.ref_name), 'nots-cli-v')}}"
    strategy:
      matrix:
        platform:
          - release_for: Windows-x86_64
            # we build on linux for faster compile times
            os: ubuntu-22.04
            target: x86_64-pc-windows-gnu
            bin: nots-cli.exe
            name: nots-cli-x86_64-pc-windows.zip
          - release_for: macOS-x86_64
            # cross-compiling for macOS is too much of a pain
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: nots-cli
            name: nots-cli-x86_64-apple-darwin.tar.gz
          - release_for: macOS-aarch64
            # cross-compiling for macOS is too much of a pain
            os: macOS-latest
            target: aarch64-apple-darwin
            bin: nots-cli
            name: nots-cli-aarch64-apple-darwin.tar.gz
          - release_for: Linux-x86_64
            os: ubuntu-22.04
            # musl for maximum compatibility
            target: x86_64-unknown-linux-musl
            bin: nots-cli
            name: nots-cli-x86_64-unknown-linux.tar.gz
          - release_for: Linux-aarch64
            os: ubuntu-22.04
            # musl for maximum compatibility
            target: aarch64-unknown-linux-musl
            bin: nots-cli
            name: nots-cli-aarch64-unknown-linux.tar.gz

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: refs/tags/${{ env.RELEASE_TAG_REF }}

      - name: Install latest stable Rust and add targets
        run: |
          rustup toolchain install stable
          rustup default stable
          rustup target add ${{ matrix.platform.target }}

      - name: Install musl-tools
        if: ${{ matrix.platform.os == 'ubuntu-22.04' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Install mingw-w64
        if: ${{ matrix.platform.release_for == 'Windows-x86_64' }}
        run: |
          sudo apt-get install -y mingw-w64

      - name: Cache Musl
        if: ${{ matrix.platform.release_for == 'Linux-aarch64' }}
        id: cache-primes
        uses: actions/cache@v3
        with:
          path: aarch64-linux-musl-cross
          key: musl-11

      - name: Install aarch64 musl
        if: ${{ matrix.platform.release_for == 'Linux-aarch64' }}
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu
          curl -s https://more.musl.cc/11/x86_64-linux-musl/aarch64-linux-musl-cross.tgz | tar -xz

      - name: Add aarch64 musl to path
        if: ${{ matrix.platform.release_for == 'Linux-aarch64' }}
        run: |
          echo "$PWD/aarch64-linux-musl-cross/bin" >> $GITHUB_PATH


      - name: Build binary
        run: cargo build --release --target ${{ matrix.platform.target }} --locked --bin nots-cli

      - name: .tar.gz if not Windows
        if: ${{ matrix.platform.release_for != 'Windows-x86_64' }}
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar -czf ${{ matrix.platform.name }} nots-cli

      - name: .zip if Windows
        if: ${{ matrix.platform.release_for == 'Windows-x86_64' }}
        run: |
          cd target/${{ matrix.platform.target }}/release
          zip ${{ matrix.platform.name }} nots-cli.exe

      - name: Upload binary to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG_REF }}
          files: target/${{ matrix.platform.target }}/release/${{ matrix.platform.name }}
